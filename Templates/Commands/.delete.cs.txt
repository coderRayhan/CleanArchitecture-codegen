using AspNetCoreHero.Results;
using MediatR;
using System;
using System.Threading;
using System.Threading.Tasks;
using {applicationRootNs}.Interfaces.Repositories;
using {applicationRootNs}.Interfaces.Repositories.{moduleName};

namespace {namespace}
{
    public record Delete{itemName}Command(int Id) : IRequest<Result<int>> { }
    public record Delete{itemName}CommandHandler(I{itemName}Repository _repository, IUnitOfWork _unitOfWork) : IRequestHandler<Delete{itemName}Command, Result<int>>
    {
        public async Task<Result<int>> Handle(Delete{itemName}Command request, CancellationToken cancellationToken)
        {
            try
            {
                var entity = await _repository.GetByIdAsync(request.Id);
                if (entity == null)
                    return Result<int>.Fail("Data not found");
                await _repository.DeleteAsync(entity);
                await _unitOfWork.Commit(cancellationToken);
                return Result<int>.Success();
            }
            catch (Exception ex)
            {
                return Result<int>.Fail(ex.Message);
            }
        }
    }
}

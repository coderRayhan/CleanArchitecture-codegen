using AspNetCoreHero.Results;
using MediatR;
using System;
using System.Threading;
using System.Threading.Tasks;
using {applicationRootNs}.Interfaces.Repositories;
using {applicationRootNs}.Interfaces.Repositories.{moduleName};
namespace {namespace}
{
    public record Update{itemName}Command : IRequest<Result<int>>
    {
        public int Id { get; set; }
        {dtoFieldDefinition}
    }
    public record Update{itemName}CommandHandler(I{itemName}Repository repository, IUnitOfWork unitOfWork) : IRequestHandler<Update{itemName}Command, Result<int>>
    {
        public async Task<Result<int>> Handle(Update{itemName}Command command, CancellationToken cancellationToken)
        {
            try
            {
                var entity = await repository.GetByIdAsync(command.Id);
                if (entity == null)
                {
                    return Result<int>.Fail("Data Not Found");
                }
                else
                {
                    // todo: Need to add this property
                    await repository.UpdateAsync(entity);
                    await unitOfWork.Commit(cancellationToken);
                    return Result<int>.Success(entity.Id);
                }
            }
            catch (Exception ex)
            {
                return Result<int>.Fail(ex.Message);
            }
        }
    }
}
